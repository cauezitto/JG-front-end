{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport PaymentsBanner from 'components/PaymentsBanner';\nimport { FilterProducts } from 'graphql/queryes/produtos';\nimport DefaultTemplate from 'templates/Default';\nimport { initializeApollo } from 'utils/apollo';\nimport * as S from 'styles/pages/loja';\nimport FilterAside from 'components/FilterAside';\nimport PaddingWrapper from 'components/PaddingWrapper';\nimport { HorizontalPaddingWrapper } from 'styles/pages/home';\nimport ProductCard from 'components/ProductCard';\nimport { FiFilter } from 'react-icons/fi';\nimport { getCategorias } from 'graphql/queryes/categorias';\nimport { useRouter } from 'next/router';\nimport { parseQueryStringToFilter, parseQueryStringToWhere } from 'utils/filter';\nimport { IoIosArrowDown } from 'react-icons/io';\nimport { useQueryProducts } from 'graphql/queryes/produtos';\n\nconst Loja = ({\n  categorias = [],\n  marcas = [],\n  filterItems\n}) => {\n  var _data$produtosConnect, _data$produtosConnect2;\n\n  const {\n    0: showFilterAside,\n    1: setShowFilterAside\n  } = useState(false);\n  const {\n    push,\n    query\n  } = useRouter();\n  const {\n    data,\n    loading,\n    fetchMore\n  } = useQueryProducts({\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      limit: 4,\n      where: parseQueryStringToWhere({\n        queryString: query,\n        filterItems\n      })\n    }\n  }); // if (!data) return <p>loading...</p>\n  // console.log(data)\n  // console.log(filterItems)\n  // console.log(parseQueryStringToWhere({ queryString: query, filterItems }))\n\n  const handleCloseAside = () => {\n    setShowFilterAside(false);\n  }; // const { produtos, produtosConnection } = data\n\n\n  const hasMoreGames = (data === null || data === void 0 ? void 0 : data.produtos.length) < ((data === null || data === void 0 ? void 0 : (_data$produtosConnect = data.produtosConnection) === null || _data$produtosConnect === void 0 ? void 0 : (_data$produtosConnect2 = _data$produtosConnect.values) === null || _data$produtosConnect2 === void 0 ? void 0 : _data$produtosConnect2.length) || 0);\n\n  const handleShowMore = () => {\n    var _data$produtos;\n\n    fetchMore({\n      variables: {\n        limit: 4,\n        start: data === null || data === void 0 ? void 0 : (_data$produtos = data.produtos) === null || _data$produtos === void 0 ? void 0 : _data$produtos.length\n      }\n    });\n  };\n\n  const handleFilter = items => {\n    push({\n      pathname: '/loja',\n      query: items\n    });\n    return;\n  };\n\n  return /*#__PURE__*/_jsxs(DefaultTemplate, {\n    categorias: categorias,\n    children: [/*#__PURE__*/_jsx(PaymentsBanner, {}), /*#__PURE__*/_jsx(PaddingWrapper, {\n      children: /*#__PURE__*/_jsxs(HorizontalPaddingWrapper, {\n        children: [/*#__PURE__*/_jsxs(S.Content, {\n          children: [/*#__PURE__*/_jsx(S.MobileFilterOpener, {\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              role: \"button\",\n              className: \"filter-opener-button\",\n              onClick: () => {\n                setShowFilterAside(true);\n              },\n              children: [/*#__PURE__*/_jsx(FiFilter, {}), \"\\xA0 filtros\"]\n            })\n          }), /*#__PURE__*/_jsx(FilterAside, {\n            onClose: handleCloseAside,\n            mobileShow: showFilterAside,\n            marcas: marcas,\n            categorias: categorias,\n            onFilter: handleFilter,\n            isLoading: loading,\n            initialValues: parseQueryStringToFilter({\n              queryString: query,\n              filterItems\n            })\n          }), /*#__PURE__*/_jsx(S.ProductsList, {\n            children: data === null || data === void 0 ? void 0 : data.produtos.map((produto, index) => {\n              var _produto$cover;\n\n              return /*#__PURE__*/_jsx(\"div\", {\n                className: \"center\",\n                children: /*#__PURE__*/_jsx(ProductCard, {\n                  id: produto === null || produto === void 0 ? void 0 : produto.id,\n                  image: process.env.NEXT_PUBLIC_SERVER_HOST + (produto === null || produto === void 0 ? void 0 : (_produto$cover = produto.cover) === null || _produto$cover === void 0 ? void 0 : _produto$cover.url),\n                  name: produto === null || produto === void 0 ? void 0 : produto.nome,\n                  price: produto === null || produto === void 0 ? void 0 : produto.preco,\n                  slug: produto === null || produto === void 0 ? void 0 : produto.slug\n                })\n              }, index);\n            })\n          })]\n        }), hasMoreGames && /*#__PURE__*/_jsx(HorizontalPaddingWrapper, {\n          children: /*#__PURE__*/_jsx(S.ViewMoreWrapper, {\n            onClick: handleShowMore,\n            children: loading ? /*#__PURE__*/_jsx(_Fragment, {\n              children: \"Carregando...\"\n            }) : /*#__PURE__*/_jsxs(_Fragment, {\n              children: [\"Ver Mais \\xA0 \", /*#__PURE__*/_jsx(IoIosArrowDown, {})]\n            })\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport const getServerSideProps = async ({\n  query\n}) => {\n  const client = initializeApollo();\n  const {\n    data\n  } = await client.query({\n    query: getCategorias\n  });\n  const filterCategories = {\n    title: 'Categorias',\n    name: 'categorias',\n    type: 'checkbox',\n    fields: data.categorias\n  };\n  const filterBrands = {\n    title: 'Marca',\n    name: 'marca',\n    type: 'checkbox',\n    fields: data.marcas\n  };\n  const filterItems = [filterCategories, filterBrands];\n  const response = await client.query({\n    query: FilterProducts,\n    variables: {\n      limit: 4,\n      where: parseQueryStringToWhere({\n        queryString: query,\n        filterItems\n      })\n    }\n  }); // console.log(parseQueryStringToWhere({ queryString: query, filterItems }))\n\n  const {\n    produtos,\n    categorias,\n    marcas\n  } = response.data;\n  return {\n    props: {\n      produtos,\n      categorias,\n      marcas,\n      filterItems,\n      initialApolloState: client.cache.extract()\n    }\n  };\n};\nexport default Loja;","map":null,"metadata":{},"sourceType":"module"}