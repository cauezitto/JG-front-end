{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport handleCartStorage from 'utils/handleCart';\nimport { useCookies } from 'react-cookie';\nvar Context = /*#__PURE__*/createContext(null);\n\nvar StatesProvider = function StatesProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(''),\n      server = _useState[0],\n      setServer = _useState[1];\n\n  var _useState2 = useState({\n    products: [],\n    total: 0\n  }),\n      cart = _useState2[0],\n      setCart = _useState2[1];\n\n  var _useState3 = useState(null),\n      token = _useState3[0],\n      setToken = _useState3[1];\n\n  var _useState4 = useState(null),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(true),\n      isLoading = _useState5[0],\n      setIsLoading = _useState5[1];\n\n  var _useCookies = useCookies(['user']),\n      _useCookies2 = _slicedToArray(_useCookies, 2),\n      cookie = _useCookies2[0],\n      setCookie = _useCookies2[1];\n\n  useEffect(function () {\n    if (!isLoading) {\n      handleCartStorage.addToCart(cart);\n      setCookie('cart', cart, {\n        path: '/',\n        maxAge: 604800,\n        // Expires after 1hr\n        sameSite: true\n      });\n    }\n  }, [cart]);\n  useEffect(function () {\n    setIsLoading(false);\n    setCart(handleCartStorage.getCart());\n    setUser(cookie.user);\n    setCookie('cart', handleCartStorage.getCart(), {\n      path: '/',\n      maxAge: 604800,\n      // Expires after 1hr\n      sameSite: true\n    });\n    setServer(process.env.NEXT_PUBLIC_SERVER_HOST ? process.env.NEXT_PUBLIC_SERVER_HOST : '');\n  }, []);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: {\n      server: server,\n      token: token,\n      setToken: setToken,\n      user: user,\n      setUser: setUser,\n      cart: cart,\n      setCart: setCart\n    },\n    children: children\n  });\n};\n\nexport default StatesProvider;\nexport var useStateContext = function useStateContext() {\n  var context = useContext(Context);\n\n  if (!context) {\n    throw new Error('Use count precisa estar dentro de um provider');\n  }\n\n  var server = context.server,\n      token = context.token,\n      setToken = context.setToken,\n      user = context.user,\n      setUser = context.setUser,\n      cart = context.cart,\n      setCart = context.setCart;\n  return {\n    server: server,\n    token: token,\n    setToken: setToken,\n    user: user,\n    setUser: setUser,\n    cart: cart,\n    setCart: setCart\n  };\n};","map":null,"metadata":{},"sourceType":"module"}