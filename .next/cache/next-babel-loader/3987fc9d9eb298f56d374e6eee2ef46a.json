{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { useMemo } from 'react';\nimport { concatPagination } from '@apollo/client/utilities'; // import apolloCache from './apolloCache'\n\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: `${process.env.NEXT_PUBLIC_SERVER_HOST}/graphql`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            produtos: concatPagination(['where', 'sort'])\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient, _apolloClient2;\n\n  // serve para verificar se já existe uma instância, para não criar outra\n  const apolloClientGlobal = (_apolloClient = apolloClient) !== null && _apolloClient !== void 0 ? _apolloClient : createApolloClient(); // se a página usar o apolloClient no lado client\n  // hidratamos o estado inicial aqui\n\n  if (initialState) {\n    apolloClientGlobal.cache.restore(initialState);\n  } // sempre inicializando no SSR com cache limpo\n\n\n  if (true) return apolloClientGlobal; // cria o apolloClient se estiver no client side\n\n  apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : apolloClientGlobal;\n  return apolloClient;\n}\nexport function useApollo(initialState = null) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}