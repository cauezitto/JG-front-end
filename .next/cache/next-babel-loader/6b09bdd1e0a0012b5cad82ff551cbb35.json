{"ast":null,"code":"import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { useMemo } from 'react';\nimport { concatPagination } from '@apollo/client/utilities'; // import apolloCache from './apolloCache'\n\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: `${process.env.NEXT_PUBLIC_SERVER_HOST}/graphql`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            produtos: concatPagination(['where', 'sort'])\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient, _apolloClient2;\n\n  // serve para verificar se já existe uma instância, para não criar outra\n  const apolloClientGlobal = (_apolloClient = apolloClient) !== null && _apolloClient !== void 0 ? _apolloClient : createApolloClient(); // se a página usar o apolloClient no lado client\n  // hidratamos o estado inicial aqui\n\n  if (initialState) {\n    apolloClientGlobal.cache.restore(initialState);\n  } // sempre inicializando no SSR com cache limpo\n\n\n  if (true) return apolloClientGlobal; // cria o apolloClient se estiver no client side\n\n  apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : apolloClientGlobal;\n  return apolloClient;\n}\nexport function useApollo(initialState = null) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/cauezitto/Documents/projetos/JG/front-end/src/utils/apollo.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","useMemo","concatPagination","apolloClient","createApolloClient","ssrMode","link","uri","process","env","NEXT_PUBLIC_SERVER_HOST","cache","typePolicies","Query","fields","produtos","initializeApollo","initialState","apolloClientGlobal","restore","useApollo","store"],"mappings":"AAAA,SACEA,YADF,EAEEC,QAFF,EAGEC,aAHF,QAKO,gBALP;AAMA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,0BAAjC,C,CACA;;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIN,YAAJ,CAAiB;AACtBO,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIP,QAAJ,CAAa;AACjBQ,MAAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,uBAAwB;AAD3B,KAAb,CAFgB;AAKtBC,IAAAA,KAAK,EAAE,IAAIX,aAAJ,CAAkB;AACvBY,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEb,gBAAgB,CAAC,CAAC,OAAD,EAAU,MAAV,CAAD;AADpB;AADH;AADK;AADS,KAAlB;AALe,GAAjB,CAAP;AAeD;;AAED,OAAO,SAASc,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD;AACA,QAAMC,kBAAkB,oBAAGf,YAAH,yDAAmBC,kBAAkB,EAA7D,CAFoD,CAIpD;AACA;;AACA,MAAIa,YAAJ,EAAkB;AAChBC,IAAAA,kBAAkB,CAACP,KAAnB,CAAyBQ,OAAzB,CAAiCF,YAAjC;AACD,GARmD,CAUpD;;;AACA,YAAmC,OAAOC,kBAAP,CAXiB,CAYpD;;AACAf,EAAAA,YAAY,qBAAGA,YAAH,2DAAmBe,kBAA/B;AAEA,SAAOf,YAAP;AACD;AAED,OAAO,SAASiB,SAAT,CAAmBH,YAAY,GAAG,IAAlC,EAAwC;AAC7C,QAAMI,KAAK,GAAGpB,OAAO,CAAC,MAAMe,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject\n} from '@apollo/client'\nimport { useMemo } from 'react'\nimport { concatPagination } from '@apollo/client/utilities'\n// import apolloCache from './apolloCache'\n\nlet apolloClient: ApolloClient<NormalizedCacheObject | null>\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: `${process.env.NEXT_PUBLIC_SERVER_HOST}/graphql`\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            produtos: concatPagination(['where', 'sort'])\n          }\n        }\n      }\n    })\n  })\n}\n\nexport function initializeApollo(initialState = null) {\n  // serve para verificar se já existe uma instância, para não criar outra\n  const apolloClientGlobal = apolloClient ?? createApolloClient()\n\n  // se a página usar o apolloClient no lado client\n  // hidratamos o estado inicial aqui\n  if (initialState) {\n    apolloClientGlobal.cache.restore(initialState)\n  }\n\n  // sempre inicializando no SSR com cache limpo\n  if (typeof window === 'undefined') return apolloClientGlobal\n  // cria o apolloClient se estiver no client side\n  apolloClient = apolloClient ?? apolloClientGlobal\n\n  return apolloClient\n}\n\nexport function useApollo(initialState = null) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}