{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport * as S from './styles';\n\nvar Checkbox = function Checkbox(_ref) {\n  var onCheck = _ref.onCheck,\n      _ref$isChecked = _ref.isChecked,\n      isChecked = _ref$isChecked === void 0 ? false : _ref$isChecked,\n      label = _ref.label,\n      _ref$labelFor = _ref.labelFor,\n      labelFor = _ref$labelFor === void 0 ? '' : _ref$labelFor,\n      _ref$labelColor = _ref.labelColor,\n      labelColor = _ref$labelColor === void 0 ? 'white100' : _ref$labelColor,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, [\"onCheck\", \"isChecked\", \"label\", \"labelFor\", \"labelColor\", \"value\"]);\n\n  // controlled component (state)\n  var _useState = useState(isChecked),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var onChange = function onChange() {\n    var status = !checked; // true => false => true\n\n    setChecked(status);\n    !!onCheck && onCheck(status);\n  };\n\n  return /*#__PURE__*/_jsxs(S.Wrapper, {\n    children: [/*#__PURE__*/_jsx(S.Input, _objectSpread({\n      id: labelFor,\n      type: \"checkbox\",\n      onChange: onChange,\n      checked: checked,\n      value: value\n    }, props)), !!label && /*#__PURE__*/_jsx(S.Label, {\n      htmlFor: labelFor,\n      labelColor: labelColor,\n      children: label\n    })]\n  });\n};\n\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}