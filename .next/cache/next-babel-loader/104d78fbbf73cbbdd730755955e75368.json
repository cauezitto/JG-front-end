{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cauezitto\\\\Documents\\\\projetos\\\\JG\\\\front-end\\\\src\\\\components\\\\CheckBox\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport * as S from './styles';\n\nvar Checkbox = function Checkbox(_ref) {\n  _s();\n\n  var onCheck = _ref.onCheck,\n      _ref$isChecked = _ref.isChecked,\n      isChecked = _ref$isChecked === void 0 ? false : _ref$isChecked,\n      label = _ref.label,\n      _ref$labelFor = _ref.labelFor,\n      labelFor = _ref$labelFor === void 0 ? '' : _ref$labelFor,\n      _ref$labelColor = _ref.labelColor,\n      labelColor = _ref$labelColor === void 0 ? 'white100' : _ref$labelColor,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, [\"onCheck\", \"isChecked\", \"label\", \"labelFor\", \"labelColor\", \"value\"]);\n\n  // controlled component (state)\n  var _useState = useState(isChecked),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var onChange = function onChange() {\n    var status = !checked; // true => false => true\n\n    setChecked(status);\n    !!onCheck && onCheck(status);\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(S.Input, _objectSpread({\n      id: labelFor,\n      type: \"checkbox\",\n      onChange: onChange,\n      checked: checked,\n      value: value\n    }, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), !!label && /*#__PURE__*/_jsxDEV(S.Label, {\n      htmlFor: labelFor,\n      labelColor: labelColor,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Checkbox, \"RJ6/NouK62cz+YZqxaIa5zUFCSk=\");\n\n_c = Checkbox;\nexport default Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"sources":["C:/Users/cauezitto/Documents/projetos/JG/front-end/src/components/CheckBox/index.tsx"],"names":["useState","S","Checkbox","onCheck","isChecked","label","labelFor","labelColor","value","props","checked","setChecked","onChange","status"],"mappings":";;;;;;;;;;;;AAAA,SAA8BA,QAA9B,QAA8C,OAA9C;AAEA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;;AAWA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAQI;AAAA;;AAAA,MAPnBC,OAOmB,QAPnBA,OAOmB;AAAA,4BANnBC,SAMmB;AAAA,MANnBA,SAMmB,+BANP,KAMO;AAAA,MALnBC,KAKmB,QALnBA,KAKmB;AAAA,2BAJnBC,QAImB;AAAA,MAJnBA,QAImB,8BAJR,EAIQ;AAAA,6BAHnBC,UAGmB;AAAA,MAHnBA,UAGmB,gCAHN,UAGM;AAAA,MAFnBC,KAEmB,QAFnBA,KAEmB;AAAA,MADhBC,KACgB;;AACnB;AADmB,kBAEWT,QAAQ,CAACI,SAAD,CAFnB;AAAA,MAEZM,OAFY;AAAA,MAEHC,UAFG;;AAInB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAMC,MAAM,GAAG,CAACH,OAAhB,CADqB,CACG;;AACxBC,IAAAA,UAAU,CAACE,MAAD,CAAV;AAEA,KAAC,CAACV,OAAF,IAAaA,OAAO,CAACU,MAAD,CAApB;AACD,GALD;;AAOA,sBACE,QAAC,CAAD,CAAG,OAAH;AAAA,4BACE,QAAC,CAAD,CAAG,KAAH;AACE,MAAA,EAAE,EAAEP,QADN;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,QAAQ,EAAEM,QAHZ;AAIE,MAAA,OAAO,EAAEF,OAJX;AAKE,MAAA,KAAK,EAAEF;AALT,OAMMC,KANN;AAAA;AAAA;AAAA;AAAA,aADF,EASG,CAAC,CAACJ,KAAF,iBACC,QAAC,CAAD,CAAG,KAAH;AAAS,MAAA,OAAO,EAAEC,QAAlB;AAA4B,MAAA,UAAU,EAAEC,UAAxC;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,aAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAiBD,CApCD;;GAAMH,Q;;KAAAA,Q;AAsCN,eAAeA,QAAf","sourcesContent":["import { InputHTMLAttributes, useState } from 'react'\nimport { Color } from 'types/style'\nimport * as S from './styles'\n\nexport type CheckboxProps = {\n  onCheck?: (status: boolean) => void\n  isChecked?: boolean\n  label?: string\n  labelFor?: string\n  labelColor?: Color\n  value?: string | ReadonlyArray<string> | number\n} & InputHTMLAttributes<HTMLInputElement>\n\nconst Checkbox = ({\n  onCheck,\n  isChecked = false,\n  label,\n  labelFor = '',\n  labelColor = 'white100',\n  value,\n  ...props\n}: CheckboxProps) => {\n  // controlled component (state)\n  const [checked, setChecked] = useState(isChecked)\n\n  const onChange = () => {\n    const status = !checked // true => false => true\n    setChecked(status)\n\n    !!onCheck && onCheck(status)\n  }\n\n  return (\n    <S.Wrapper>\n      <S.Input\n        id={labelFor}\n        type=\"checkbox\"\n        onChange={onChange}\n        checked={checked}\n        value={value}\n        {...props}\n      />\n      {!!label && (\n        <S.Label htmlFor={labelFor} labelColor={labelColor}>\n          {label}\n        </S.Label>\n      )}\n    </S.Wrapper>\n  )\n}\n\nexport default Checkbox\n"]},"metadata":{},"sourceType":"module"}